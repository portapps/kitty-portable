// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/kitty.ini (8.732kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resKittyIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x5a\x51\x8f\x1b\x39\x8e\x7e\xaf\x5f\xc1\x97\x45\xec\x4c\xc7\xdd\x99\xdb\xec\xe6\x5c\xf0\x43\xb6\x73\x41\x06\x13\xcc\xf4\xa5\xfb\xb0\x37\x98\x19\x34\x54\x55\x74\x59\xb0\x4a\xaa\x48\xaa\x76\x3b\x08\xee\xb7\x1f\x48\x4a\xe5\x72\xdb\x49\xee\xf6\x25\xb1\x25\xf1\x13\x25\x92\x1f\x49\xb9\x7f\x7f\xd3\xa2\x8d\x7f\x16\x45\x09\x2a\x6c\x6b\x67\xd7\xda\x77\x2a\x6a\x67\x97\x34\x00\x6b\xe7\x61\x3a\x0a\xce\x42\xef\xf5\x83\x8a\x08\x5b\xdc\xc3\x10\x54\x8b\x45\x09\x00\x70\x8b\x08\x9b\x18\xfb\xe5\xe5\x65\x8f\xae\x37\xb8\xe8\x7a\xfd\x62\x6b\x42\xb5\xe8\xfa\x76\xd1\xe0\xe5\xff\xf4\x35\x7a\xbb\x75\x97\xbd\x6a\x51\xd9\xb8\xd8\xc4\xce\xf0\x16\xda\xae\x5d\xda\x41\xc0\x5e\xc0\x1e\x03\x2c\x41\x99\x9d\xda\x87\x3c\x66\x1d\xc0\x12\x2c\x3e\xa0\xcf\x43\x6a\x88\x6e\x09\xce\x9a\x3d\xe8\x70\xa4\x5a\xed\xba\x0e\x6d\x24\xf5\xa3\xd2\x36\xc0\x33\x8b\xd8\x84\x7c\x9c\x67\x45\xf9\xe4\xc4\x2b\xc2\xa2\x9b\xe8\x30\xd0\xb1\x9c\xdd\xe2\x9e\x0f\x48\x7a\x18\xb7\x03\xeb\xa2\x5e\xeb\x5a\x6e\xa2\x1a\x8c\xc1\xf8\x95\x0b\x39\x81\x58\x59\x57\x14\x45\xf1\xfb\x35\x6d\xd8\xfe\xc3\x3d\xf2\x9d\x37\x95\xa9\x8d\xae\xb7\x4b\x68\x70\xad\x2d\x42\xdc\x20\x7d\x54\x83\x89\xa0\x6a\xde\x67\xb7\x41\x0b\x8d\x1b\x2a\x83\xc0\x8b\x69\x4b\x05\x01\x43\xa0\x69\x6d\xc7\x8f\x46\x87\x28\xf7\xf2\x86\xd4\xc5\x06\x1e\x94\x19\x30\x80\xf2\xb8\xcc\x17\xe6\x7a\xb4\x4b\xe8\x3d\x86\xc0\x9f\xa1\x1a\x62\x3c\x5c\x7b\x88\xca\xc7\x3c\xcf\x5f\xf2\x82\xac\xeb\x8a\xa4\x58\x79\xd1\x73\x09\x7a\xcd\xd6\x52\xc6\xb0\xfe\x49\x9d\x00\x15\x1a\x67\x5b\x88\x8e\x86\xb5\x07\xb7\xb3\xb0\x76\xa6\x41\x0f\xca\x36\x47\x67\x4d\xc3\xd1\xb9\xa2\x4c\x63\xab\x3d\x86\xc9\x36\x01\x63\xd4\xb6\x0d\x4b\x40\xab\x2a\x83\x97\x8d\x0e\xf4\x3f\xc3\x90\xe5\xc8\x88\x35\xd4\x1e\x93\xa3\xae\x79\xe6\xd9\xdb\xb4\xc3\x6d\x92\x7f\x96\xf5\x1b\x37\xca\xc8\x79\xc3\xb5\x36\x11\xfd\xc9\x3e\x32\xcc\xf7\xad\x1e\xb0\x39\x1c\x33\xa0\x41\x31\x55\xe5\x1e\x0b\x59\x96\xb1\x36\xa8\xdb\x4d\x5c\xb2\x2a\x76\xe8\x2a\xf4\xa4\xd8\x83\x0e\x9a\x20\x8d\xb6\x18\x40\x5b\xb9\xa1\x6f\xe2\xc2\x4c\x5b\xe8\x94\xb6\xb0\xd3\xb6\x71\xbb\x79\x21\xd0\xab\x1f\x5f\xd2\x3e\x06\xd7\x71\x09\xff\x0d\xbd\x0b\x7a\x7a\x7c\xf2\xef\xa1\x1d\xbc\x3a\xe0\xbc\x78\x09\x1d\x2a\x1b\xa0\x46\x1b\xd1\xcf\x8b\x92\x84\x57\x2f\x18\xa7\xf7\xee\x71\x3f\x6e\xbc\x04\xd5\x34\xa0\x64\x74\xa2\xcf\x1a\x55\x1c\x3c\xd2\x5d\xd0\x26\xac\x16\x47\xd2\x74\xa7\xa2\x3c\x06\xe3\x08\x28\xc1\x3a\x7c\xd4\xe2\x34\x01\x23\x39\xc7\x1e\xc3\x05\x78\x8c\x83\xb7\xc9\x57\x4e\xc1\x40\x45\xd9\xa6\xf7\xae\xf5\xaa\x03\x02\x29\x4a\x01\x4b\xc8\xd1\xf5\x4b\xf8\xed\x5f\xbb\x82\xe8\xfa\x74\x03\x72\xbd\x53\xbb\x05\xfd\x19\xa7\x60\x4f\x4e\x39\x15\x58\xbd\xbe\xba\xe2\x30\xff\x59\xdf\xdd\xfd\x26\xb4\xda\x54\x27\xae\xa4\x9a\x0a\xc2\xd0\xf7\xce\xc7\x42\x35\x55\x76\x16\x65\xa3\xd6\x8d\xc1\x25\xd4\x1b\xe5\x55\x4d\xee\x16\xa2\xd7\xb6\x05\x8f\xed\x60\x94\x37\x64\x05\xcb\xb7\x46\xb7\x41\xbc\x96\xd5\xb2\xc9\x36\xca\xe8\x07\x2c\xca\x8c\xb5\x5a\xc1\x1f\xdb\xab\xd7\x7f\x4c\xf1\x1b\x34\x6a\xbf\x84\xa8\x3b\x0a\x40\xa3\xf6\x50\x61\xdc\x21\x5a\x88\x3b\x47\x1b\x34\xda\xb6\x07\x08\x5e\xb2\xfa\xdb\x15\x43\x0c\xd1\x79\x4c\xdb\x7d\x27\x14\xc7\x75\x13\x97\x29\x8e\x00\xc6\x83\x0f\xd1\x05\x1a\x0f\x61\xb3\xc5\xfd\x77\x70\x43\xd8\x30\xd5\xb2\xc4\xe8\x8b\x33\xeb\x8e\x33\x55\x8e\x93\xf2\x09\x7a\xf2\x96\x4a\xd5\xdb\xd6\xbb\xc1\x36\xba\x63\x8a\x3f\xb3\xe7\x61\x0d\xf0\xa2\xf1\x14\x55\xcb\xdf\x33\x54\xfd\xf5\x1b\x45\x55\x6f\x26\xe6\xd4\x76\x72\x90\x84\x16\x60\x46\x63\x94\xaf\x94\x6d\x2e\xc0\xb8\x96\x48\xa6\xf6\xba\x8f\x17\x30\x04\xf4\xb0\x1e\xac\x5c\xe3\x62\xb1\x98\x17\x65\xda\x70\xc5\x26\xa9\x55\x1f\x8c\xa3\x1c\xb2\x76\xbe\x46\x18\xfa\x1e\x3d\xd4\x2a\x60\x91\xa7\x92\x9e\x69\x87\xa4\xac\xe8\x49\xac\xa2\x8d\xd1\x81\x6c\xd2\x84\x23\x4f\x10\x7a\x4a\x9e\x3f\xb9\x7f\xce\x0a\x09\x2c\xe9\x09\xb3\xeb\xd1\xd6\x97\x6f\x55\x54\x97\xd7\x79\x5e\xd8\x75\x5e\x94\xd3\xed\x57\x57\x8b\xab\x57\xa2\x93\x5d\xff\x3f\x29\x3d\xe7\x8c\xe3\x58\x5c\x6b\x83\x05\x0d\x65\xa7\x92\xe9\x46\xfb\xa5\x10\xcd\x49\xf4\x36\xda\x63\x1d\x9d\xdf\x4b\xee\xfb\xc9\x02\x05\x24\x2b\xd0\xb9\x06\x41\x47\x2a\x29\x48\xae\x37\xaa\x46\x4a\xc4\x1e\x29\xf4\xd6\xfa\x70\xae\xc0\x1b\x87\x11\x4c\x63\x58\xc2\x6d\xa2\xf0\x0b\xb8\x0d\x9b\xf7\x2e\xc4\x9f\x71\x1f\x2e\xc8\x78\xb2\xd5\x7f\x85\x41\x19\xaa\x58\xc6\x1d\x82\x22\xcf\xc9\x0a\xa5\xad\xb6\x3a\xc6\xfd\x02\x1f\x11\x74\xa0\xeb\x4b\xe7\x59\xf1\xe9\xfc\xbe\x8f\x41\x51\xfa\xa5\xd3\xd1\x27\xd1\x9a\xca\xa9\x5e\x85\xb0\x73\xbe\x01\xb4\xbc\x8e\xb3\xdd\x28\xb1\x62\x9e\xbb\x8e\xef\xd1\xf4\xe8\x6f\x54\xdc\x08\xcf\xad\x07\x63\xa0\x57\x71\x33\xb2\x70\xdc\xf0\x12\x56\xa1\xd2\x56\xf9\x3d\xcc\xfe\xe9\x15\x3b\x18\xed\x73\xbd\x6f\x77\x7a\x8c\xed\x79\x51\x4e\x41\x45\xcd\xe8\x4d\x54\xd5\x12\xc2\x4e\xc7\x7a\x33\xba\xd7\xcd\x70\x77\xf7\x5b\x0a\xd1\x00\x3b\x1d\x37\x70\x7d\xf7\xf1\xc3\x0f\x77\xaa\x2a\x92\xcc\x68\xc7\x7d\x1b\xd1\x77\x67\x9d\x24\xcd\x8d\x71\x99\xbe\x27\x7f\x6f\xb0\x1a\x5a\x0e\x0b\xf9\x08\xfd\xe0\x7b\x17\x90\xcb\x45\x4a\xff\xd5\xd0\xe6\xa5\x6e\x67\x8d\x53\x0d\xbb\x4b\xdc\xe8\x90\x0d\x63\x5c\xad\xcc\x89\x65\xc4\xe6\xca\xe3\x28\x88\x8d\x9c\x82\xdd\x25\xd4\x3d\x65\x75\x6c\x7d\x2a\x69\x27\xf0\xab\x54\x62\x20\x3e\x46\xb4\x81\xb3\x2c\x09\x8d\x5f\x59\xdf\x5c\xd2\x3d\xf1\x32\xfd\xc4\x47\x8b\xf2\x08\x69\xb5\xd8\xc6\x47\x2e\x3b\x5c\x88\x5b\xdc\x7f\x67\x0b\xff\x80\x9e\x97\x32\x9d\xf2\x0e\x45\xf9\x54\x74\xb5\xd8\x6e\xb6\x8c\xb9\xef\xd1\x1b\x6d\xb7\x67\x2d\x31\xce\x8e\xb6\x18\x47\xb2\x21\x75\x4d\x8a\x9c\x91\xa5\x09\xe8\x94\x55\x2d\x72\xc5\x3e\x52\xba\x82\x5e\xf9\xa8\x6b\x4a\x7d\xb2\x8a\x15\xef\xb1\xa6\x32\x3c\x5f\xd2\xbc\xa0\xa9\xe9\x2e\x74\x94\x25\xf4\x4e\x4b\xaa\x54\x7c\xb6\x64\x3a\xb2\x8b\xb7\xca\xf0\x42\xb1\x21\xd9\x38\x62\x53\x94\x59\x76\x35\x46\x1e\x23\x5a\x1d\x13\x67\xd2\x47\x4d\xfe\x90\xb9\xf3\x40\x9b\x6b\x4a\x46\x13\x92\x94\x2c\x4a\x9c\x95\xa3\xf1\x02\x9c\xe7\x15\x99\x3b\x8b\x72\x84\x5e\xfd\xb8\x60\x32\xff\x59\x5f\x1b\x15\xc2\x2f\xaa\x93\x2a\xc0\xb6\xe9\x8a\xb2\xd6\xc1\xad\xe3\x8e\x94\xb6\xc4\x18\xd1\x41\x85\x07\x02\x51\x41\x02\xab\x28\x27\x38\x2b\x19\xa2\x22\x91\x7c\xb9\xee\x9a\x65\xba\xec\xe4\xdc\x49\x9b\x00\x33\x66\x76\xd2\x9a\x5d\xf9\xfe\x9e\x6a\xc3\x24\x93\xaf\x97\xbf\x0f\x36\x60\x3d\x78\x3c\xc5\xca\x33\x13\x50\xb8\xbf\xbf\xef\xcd\x05\xdc\xdf\x37\x81\xfe\xad\x3b\xfa\x57\x23\x64\xf4\x09\x5a\x8a\xc6\x4e\x3d\x56\xe4\x39\xda\xb6\x94\x52\x69\x8f\x47\xdd\x0d\x1d\xf0\x68\xe0\x5a\x38\xec\x43\xc4\x0e\xa2\x57\xfb\x79\x32\xad\xc7\x1a\xf5\x03\xe9\x5f\xa1\x31\x10\x74\x6b\x95\x29\x9e\x80\xad\x38\xed\x74\x6e\x08\x18\x36\xce\xc7\x7a\x88\xa7\x3d\x05\x4f\xc3\x38\x5f\x1c\x2f\xcf\x77\x21\x05\xbd\x5b\xb3\x27\x2d\x21\xba\xa8\xcc\xa4\xca\x3f\xf6\xb4\xa2\x3c\x5a\xbe\xfa\x2b\xeb\xd1\xab\x10\x4f\x6b\x0f\x67\xa5\x37\xa0\xaa\x57\x49\x55\x31\x29\xb9\x59\x26\x77\x87\xb3\x21\xe0\x7a\x30\xd4\x13\x06\x6a\x51\x25\xaa\x03\x53\xdc\xbc\xe0\xa5\xe9\x52\xf9\x33\xd5\xb2\xcb\x84\xc0\x75\xad\xd1\x9d\x8e\x30\x3b\x68\x3d\xd6\x2a\x61\xbe\x80\x37\x95\x7b\x10\xff\x92\x75\xea\xb8\xc4\xd2\x01\x3c\x7e\x1a\x30\x44\x6c\x16\x30\xbb\x4a\x55\xf5\x60\x79\x35\x36\xf3\xa2\x1c\x77\x95\x62\xe5\x86\x2c\xf1\x8d\x94\xd3\xd3\x3c\xe7\x9b\x99\xf3\xb0\xcd\xdf\xe6\x29\xfd\x14\xe5\x08\xc0\x3c\x7a\x73\x7b\x7d\xf3\x2d\xb4\x50\xf7\x07\xb0\xf4\x65\x82\x95\xa4\x19\xea\x63\x2e\x4a\xdf\xa6\x5a\x6e\x73\x28\xe5\x38\xb6\xa3\xdf\x6b\xe9\x66\xc7\xfa\xf5\x10\xef\x9c\xce\x67\x07\x42\x98\x17\xc7\x78\xe2\x75\x41\x3d\x2c\x8f\x14\xa4\x8e\x4f\xc8\x29\xd5\x36\xdc\x37\x50\xb5\xaf\x43\xf4\xfb\x05\x15\x25\x1d\x11\x34\x95\x73\x21\xd5\x0b\x89\xae\x80\x7d\xfe\x2f\x6f\x6e\x6e\xde\xbe\xb9\x7b\xf3\x97\x4b\x16\xbd\x14\xe6\x0a\xea\xa1\x28\xd3\x8e\x48\x89\x62\x99\x58\x73\x7f\xd8\x76\xac\x16\x26\x0d\xa7\x24\x9b\xef\xbe\x21\x64\xfd\x80\x9c\x5e\xd0\x46\x10\xee\x66\x73\x62\xcf\x0b\xb3\x20\x1f\xf5\x6b\x42\xe4\xf5\x83\xd5\x9f\x86\x74\x25\xb3\x7a\xf0\x1e\x6d\x34\x7b\xb0\x2e\x8e\x0d\x0f\xbb\x95\xc0\x35\xda\x7f\x15\x6d\x4c\x98\x6c\xc8\x31\x7f\x87\xe8\x87\x9a\xf3\x53\xbe\x9a\x55\xa3\x3d\x5f\x15\x17\xb2\x24\x96\x1f\x00\xa6\x57\x26\xf4\x96\x8a\x5d\xc1\x1e\x53\xa4\xa8\x93\x1f\x1a\xf8\xbe\xc8\x4e\xb3\xe7\x8b\x6d\xd8\x5c\x3c\x5f\x84\xcd\xfc\x0b\x7f\x2e\xe9\xf3\x97\xdb\xff\xfc\x90\x10\x66\xcf\x17\xe1\x93\xa1\xc9\xf0\xc9\x7c\x79\x63\xcc\x61\xfc\x39\x8d\x3e\xff\x52\x94\x4f\xd5\x5a\x9d\x5d\x36\xea\x2f\xc6\x7e\xc2\x27\x1f\xb9\xda\x92\x05\xe4\xc3\x52\x3a\x1c\x04\x32\xa1\x7d\x9d\x10\xb7\xb8\xaf\x9c\xf2\xcd\x84\x13\x4f\xe8\x50\xb8\xe5\x89\xa0\x78\x82\x70\x4d\x32\x46\x1a\x8a\x3a\x1a\x2c\x98\x1a\x84\xa0\x82\xd1\x0d\x3e\x6d\x4e\xbe\x9a\x60\xa5\x21\x93\xb2\x92\xce\x44\x6b\x09\x20\x6c\xdc\x2e\x1d\x90\xac\x92\x39\xc9\xba\x69\x72\xa6\x85\x17\xb0\x53\x9a\xaf\x83\x82\x60\x3c\x20\x3e\xa0\x8d\x45\x79\x50\x46\x88\x2b\x84\x0d\xf1\x2a\xd7\x52\xef\xb8\xcf\xa2\xa3\xdc\xde\xbe\x87\x34\x2c\xe7\x59\x9c\xf1\x85\xa5\x24\xe5\x17\x1c\xa0\x32\x2f\x61\x5e\x1b\xa5\xbb\x1c\xd5\x93\x35\x0b\xf8\xc7\x10\x21\xb8\x0e\x89\xfa\xb9\x0e\xa5\xa3\x7b\x1c\xd9\x3d\x6e\x54\x84\xc6\x71\x5c\xe4\xa7\x49\x4b\x8d\x99\x6d\xe8\x0c\x12\xb2\x49\x97\x5b\x97\x76\xe8\x5d\x90\x67\x27\xa6\xb0\xf4\xe0\xa8\xe9\xac\xe3\xd9\x56\xbf\xf6\x68\x6f\x6f\xdf\xdf\xbf\x5a\x30\x61\x45\xaf\x6c\xe8\x95\x47\x5b\x9f\xef\xca\xa7\x0b\xc6\xca\x6f\x3a\x98\x9d\x83\xda\x58\x2a\x84\x42\xd8\x58\x47\xa1\x97\x9f\x0d\x2f\xf8\x12\xc7\x8e\x65\xa7\x8d\xe1\x63\x55\xf9\x3d\x2c\xa7\x51\x22\x58\x6a\x28\x6b\x65\x9f\xf1\xb4\xc7\x21\x60\x73\xcc\xc1\xf3\xe2\x64\xa3\xe4\x5d\x3b\x6d\xbd\x33\x67\x0f\xe1\x9d\x31\xec\x07\xb9\xee\xcc\x03\xe3\xcb\x1c\xdb\x16\x2a\xe5\xe7\x85\xe0\xe4\x63\xfd\x53\xdb\x6f\xa7\xa0\x9d\xb6\x39\x09\x49\xda\x59\x16\xe5\x41\x68\x95\x34\x63\xfc\xb3\xba\xa1\xdd\x28\x5b\x63\x93\x54\x18\x55\xe4\x36\xcf\xbb\x88\x35\xa5\x02\xe6\x72\xba\x9c\x49\xb8\xb1\xaa\x2c\x95\x95\xfd\x4c\xcb\x4e\x1b\x29\x19\x3e\x40\x47\x79\x03\xba\x94\x72\x2a\x37\x3b\x5c\x12\x86\xcf\x97\xfe\xf3\x58\xdb\xcd\x0b\x11\x15\xfc\xa2\xf8\xfd\x36\x53\x02\xbf\x7c\xdd\x1e\xd8\x84\x9d\x4d\x5e\xe5\x48\x71\x7e\x34\x44\x3b\x1c\xd8\x84\xe2\x8f\x75\x9c\x79\x9c\xd3\xee\xd3\xfe\x3f\xbd\x24\xcc\x72\xe3\xaf\x03\xdc\xbe\xff\xe9\xdd\xdd\x0f\xef\x5e\xfe\x98\xde\x77\xd2\x1a\xbe\xcf\x6b\x29\x9b\xc7\xd6\x89\xdb\x6e\xa9\xa5\xc7\xa7\x5e\x5e\x67\x50\x79\x62\x45\x67\x4c\xa5\xea\x6d\x51\xd6\x34\x72\x18\x98\xac\x32\xae\x95\x17\x06\x59\x63\x5c\xcb\x7d\x82\x2c\xa0\x96\x92\x14\xf4\x98\x9e\x46\x24\x6f\x1d\x1e\x9a\x6b\x5a\x92\x66\x59\xc6\x0f\x16\xd4\x71\xf9\x7d\x74\xbc\xeb\x5f\x7f\xb9\xfb\xf8\xeb\x87\x1f\xde\xbd\x3a\xbc\x9b\xc8\x66\xae\xdf\xf3\x43\x7b\x32\x74\x35\xac\xd7\x4c\x08\x0e\x6a\xa3\x7b\xa6\x30\x92\xe8\xf7\xca\x18\x96\xa0\x88\x06\x05\xcd\xd0\x1b\x4d\x75\x43\x96\x9c\x89\x41\xa9\x6d\x78\xda\x6c\xce\x8b\x72\x5c\xce\x18\xfc\x3b\x41\xc4\xc7\x08\xd8\xe8\x28\x3f\x09\x59\xf1\xbc\xe4\xe6\x93\x97\xe9\x73\x76\x22\x33\x89\xe8\x79\x3c\xd6\x65\x3c\x00\xff\x64\x83\x36\x5e\xfc\xdf\xf7\xc9\x17\x76\xb2\xdf\x08\xba\x4a\x2e\xb9\x13\x86\x27\x8b\x16\x25\x7f\x34\xae\x95\x49\x79\xa2\x58\x3b\xe9\x1a\x2b\xa3\xe4\xb7\x96\xdd\x46\x47\x6a\x68\x8c\xf3\xa1\x28\x69\x9a\xa7\x94\x6d\x78\x86\x65\xdf\x62\xed\x51\x05\x14\x69\x0a\x3f\x59\x49\x8d\xff\x39\x70\x8b\xad\x8a\x14\x5c\x53\xd8\x3c\xc8\x02\x3f\xd9\xf3\x88\x43\x3f\xc5\xa3\x42\x87\x28\x27\xd4\x1e\xd1\x16\x25\x7d\x91\xcf\xe2\x67\x29\x84\x15\x78\xec\x5c\x4c\x85\x15\xdf\x76\xae\x8d\x9f\xf2\x56\x37\x04\x21\x5f\x7e\xb7\x67\xfe\x9d\x58\xe6\xac\x93\xfe\x75\x5e\x94\x2d\xc6\x31\x22\x26\x7d\xeb\xc9\x0b\xea\x59\x80\x97\x2f\xe7\x45\xc9\xf3\x22\xca\x28\x5c\x7d\x4d\xe2\x83\x5f\xee\xcf\x49\xbf\x26\x61\xdb\x0f\xf1\xac\x18\x1f\xb6\x1b\x4c\xd4\x2f\xb8\xa5\x4a\x1e\x77\xc6\x49\x47\x9c\x2e\x35\x04\x3d\x2a\x79\x1a\xc1\x47\xd1\xab\x28\xf9\x65\x64\xa2\xe4\x2f\xb8\x1b\xc3\x87\x79\x86\x5c\xdb\xe2\x4e\x6c\xc4\x6c\xa0\xc0\xe2\xee\xcc\x2f\x1a\xe2\xf3\x23\x55\x24\xb2\xaa\x86\xc8\x33\x6e\x88\xfc\x34\x43\x6d\xfe\x88\x9a\x56\x4b\xeb\xe3\xb5\x3d\x50\xcd\x49\xec\x4c\x0e\xb8\xce\x07\xfc\x3b\xf5\x63\x24\x36\x01\x38\xe1\x92\x33\x00\x01\x0e\xa2\x99\x56\x6e\x24\xf7\x4c\x0a\xba\x0b\x38\x29\x16\xe9\xfe\xa5\x95\xe6\x7b\x3d\x6f\xbe\x7f\x67\x68\x46\x4b\xf7\xce\xcf\xb5\xe8\x3b\x4d\xed\x7b\xe9\x99\xb5\xd3\x57\x59\xe1\x8c\x79\x31\xf4\xd3\x62\xf2\x34\x53\x7f\xc5\xd3\x88\x19\x88\xdf\x53\x18\x7d\x70\xaa\x19\x99\x38\x55\xf7\x4c\xe5\x83\xa5\xaa\x49\xa2\x86\x2a\x8f\x73\x60\x84\x25\x32\x62\x6e\x4e\x5b\x09\xeb\x34\xd0\xce\x63\xfc\x1b\x61\xa0\x6d\xc6\xe0\x61\x8a\xca\x66\xed\x9d\x8f\x94\x31\x77\xca\xf3\x6b\xd2\x24\x8f\x9e\x71\xe0\xbf\x11\xd6\xc6\xed\x48\x2a\x09\x31\xe4\x7f\x58\x79\x55\xf0\xa3\x85\x8c\x6b\x5b\xc2\x3b\x03\x42\x19\x47\xaa\x6a\xe3\x5a\x6e\x0e\xc6\xb3\x4d\x8b\xf7\xd4\xbf\x1e\x1e\x61\xce\x1f\x8f\x54\xa2\xd9\x27\x9c\x85\x5d\x85\x4d\x83\x99\x14\x1e\x34\xee\x70\x62\xb1\x9c\xdd\x89\x16\x64\xee\x89\xbc\xfc\x59\xc0\xf8\x3b\xea\xd9\xad\xff\xce\xc2\xbc\x60\x12\x8d\x52\x7b\x9d\x3b\x38\x59\x42\xaa\xb5\x15\x17\x33\x1c\x1f\x7f\x4e\x7f\xc4\x3d\x3c\x8d\x48\x3f\x33\xe3\x25\xfc\xe3\x46\xfa\xf9\xef\xe5\xd5\x55\x7a\xbf\x22\xae\x39\xbc\x5b\x1d\x9e\x57\xe4\x37\x95\x1e\x3d\xf4\xaa\xc5\x22\xad\x4c\xbf\xae\x75\x8a\xb8\xc5\x9f\x93\x9b\xec\x4d\xc2\x24\x54\xa4\xe5\xab\xd7\xaf\x58\xe1\x0f\x6a\xb0\xf5\x06\xfd\x9f\xc2\xfc\xc6\xa9\x26\xd7\x7a\x47\x7f\x22\x90\xe6\x28\xb5\xf1\xaf\x53\x5c\x89\x79\x0c\xbd\xda\xd9\x42\xe6\xb8\xa2\xfb\xdf\x00\x00\x00\xff\xff\x3e\x0f\x68\x6b\x1c\x22\x00\x00")

func resKittyIniBytes() ([]byte, error) {
	return bindataRead(
		_resKittyIni,
		"res/kitty.ini",
	)
}

func resKittyIni() (*asset, error) {
	bytes, err := resKittyIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/kitty.ini", size: 8732, mode: os.FileMode(0666), modTime: time.Unix(1703601529, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0xcb, 0xcf, 0xfd, 0xef, 0x70, 0x98, 0x71, 0x50, 0xc0, 0xee, 0xa0, 0xff, 0x1d, 0x8b, 0xf4, 0xc, 0xcf, 0xe1, 0xbf, 0x94, 0x9f, 0xa9, 0x33, 0x99, 0xf2, 0x3d, 0xc8, 0x75, 0xb, 0xd9, 0x87}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/kitty.ini": resKittyIni,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": {nil, map[string]*bintree{
		"kitty.ini": {resKittyIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
